{"ast":null,"code":"import axios from 'axios';\n\nvar loadNews = function loadNews() {\n  // запрос к API\n  axios.get(require('../config/keys').apiURI).then(function (res) {\n    // перебор массива с новостями и добавление свойств\n    res.data.articles.forEach(function (element) {\n      // ищет новости в базе и в случае их отсутствия добавляет новые \n      // поиск осуществляется по дате публикации (приходит от API)\n      Article.find({\n        publishedAt: element.publishedAt\n      }, function (err, doc) {\n        if (!doc.length) {\n          Article.create({\n            author: element.author,\n            title: element.title,\n            description: element.description,\n            content: element.content,\n            urlToImage: element.urlToImage,\n            publishedAt: element.publishedAt,\n            views: 0,\n            likes: 0,\n            usersIP: [] // date: reqDate.getToday()\n\n          });\n        }\n\n        ;\n        if (err) console.log(err);\n      });\n    });\n  }).catch(function (err) {\n    return console.log(err);\n  });\n}; // получает новости из базы и записывает в store\n\n\nexport var addNews = function addNews() {\n  return function (dispatch) {\n    axios.get('/api/articles').then(function (res) {\n      dispatch({\n        type: 'ADD_NEWS',\n        payload: res.data,\n        loaded: true\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // постит колличество просмотров в базу и добавляет их в store\n\nexport var viewNews = function viewNews(id, elem) {\n  return function (dispatch) {\n    axios.post(\"/api/articles/\".concat(id), {\n      elem: elem,\n      views: true\n    }).then(function (res) {\n      dispatch({\n        type: 'VIEW_NEWS',\n        id: id,\n        views: res.data.views,\n        ip: res.data.userIpViews\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // постит колличество лайков в базу и добавляет их в store\n\nexport var likeNews = function likeNews(id, elem) {\n  return function (dispatch) {\n    axios.post(\"/api/articles/\".concat(id), {\n      elem: elem,\n      likes: true\n    }).then(function (res) {\n      return dispatch({\n        type: 'LIKE_NEWS',\n        id: id,\n        likes: res.data.likes,\n        ip: res.data.userIpLikes\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // поиск новостей\n// записывает данные из строки поиска в store и при рендеринге фильтрует записи\n\nexport var searchNews = function searchNews(text) {\n  return {\n    type: 'SEARCH_NEWS',\n    payload: text\n  };\n}; // постит в базу IP пользователя и добавляет его в store\n// колличество посещений сайта принимается равным длинне массива IP адресов\n\nexport var addVisitor = function addVisitor() {\n  return function (dispatch) {\n    axios.post('/api/visitors/').then(function (res) {\n      // если ответ c сервера пустой в store записывается пустой массив\n      if (!res.data) {\n        return dispatch({\n          type: 'ADD_VISITOR',\n          payload: []\n        });\n      }\n\n      return dispatch({\n        type: 'ADD_VISITOR',\n        payload: res.data.visitorsIp\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/dmitry/Рабочий стол/new/client/src/actions/actions.js"],"names":["axios","loadNews","get","require","apiURI","then","res","data","articles","forEach","element","Article","find","publishedAt","err","doc","length","create","author","title","description","content","urlToImage","views","likes","usersIP","console","log","catch","addNews","dispatch","type","payload","loaded","viewNews","id","elem","post","ip","userIpViews","likeNews","userIpLikes","searchNews","text","addVisitor","visitorsIp"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n\nconst loadNews = () => {\n    // запрос к API\n    axios\n    .get(require('../config/keys').apiURI)\n    .then(res=> {\n        // перебор массива с новостями и добавление свойств\n        res.data.articles.forEach( element => {\n\n                // ищет новости в базе и в случае их отсутствия добавляет новые \n                // поиск осуществляется по дате публикации (приходит от API)\n            Article.find({publishedAt: element.publishedAt}, (err, doc)=>{\n                \n                if(!doc.length){ \n                    Article.create({ \n                        author: element.author,  \n                        title: element.title,\n                        description: element.description,\n                        content: element.content,\n                        urlToImage: element.urlToImage,\n                        publishedAt: element.publishedAt,\n                        views: 0,\n                        likes: 0,\n                        usersIP: [],\n                        // date: reqDate.getToday()\n                    });\n                };\n                \n                if(err) console.log(err);\n            });\n        });\n    })\n    .catch(err=> console.log(err)); \n };\n\n// получает новости из базы и записывает в store\nexport const addNews = () => (dispatch) =>{\n    axios\n        .get('/api/articles')\n        .then(res=> {\n            dispatch({\n                type: 'ADD_NEWS',\n                payload: res.data,\n                loaded: true \n            });\n        })\n        .catch(err =>\n            console.log(err));\n };\n\n// постит колличество просмотров в базу и добавляет их в store\nexport const viewNews = (id, elem) => (dispatch) =>{\n    axios\n        .post(`/api/articles/${id}`, {elem, views: true})\n        .then(res=>{\n            dispatch({\n                type: 'VIEW_NEWS',\n                id: id,\n                views: res.data.views,\n                ip: res.data.userIpViews\n            });\n        })\n        .catch(err =>\n            console.log(err));\n};\n\n// постит колличество лайков в базу и добавляет их в store\nexport const likeNews = ( id, elem) => (dispatch) =>{\n    axios\n        .post(`/api/articles/${id}`, {elem, likes: true})\n        .then(res=>{\n            return  dispatch({\n                type: 'LIKE_NEWS',\n                id: id, \n                likes: res.data.likes,\n                ip: res.data.userIpLikes\n            }); \n        })\n        .catch(err =>\n            console.log(err));\n};\n\n// поиск новостей\n// записывает данные из строки поиска в store и при рендеринге фильтрует записи\nexport const searchNews = (text) => ({type: 'SEARCH_NEWS', payload: text});\n\n// постит в базу IP пользователя и добавляет его в store\n// колличество посещений сайта принимается равным длинне массива IP адресов\nexport  const  addVisitor = () => (dispatch) => {\n    axios\n        .post('/api/visitors/')\n        .then(res => {\n            \n            // если ответ c сервера пустой в store записывается пустой массив\n            if(!res.data){\n                return dispatch({\n                    type: 'ADD_VISITOR',\n                    payload: []\n                });\n            } \n\n            return dispatch({\n                type: 'ADD_VISITOR',\n                payload: res.data.visitorsIp\n            });\n        });\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}