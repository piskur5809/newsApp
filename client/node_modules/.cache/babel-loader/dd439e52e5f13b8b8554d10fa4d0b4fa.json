{"ast":null,"code":"import axios from 'axios'; // получает новости из базы и записывает в store\n// export const addNews = () => (dispatch) =>{\n//     axios\n//         .get('/api/articles')\n//         .then(res=> {\n//             dispatch({\n//                 type: 'ADD_NEWS',\n//                 payload: res.data,\n//                 loaded: true \n//             });\n//         })\n//         .catch(err =>\n//             console.log(err));\n//  };\n\nexport var addNews = function addNews() {\n  return function (dispatch) {\n    axios.get(require('../../../config/keys').apiURI).then(function (res) {\n      console.log('1'); // перебор массива с новостями и добавление свойств\n\n      res.data.articles.forEach(function (element) {\n        // ищет новости в базе и в случае их отсутствия добавляет новые \n        // поиск осуществляется по дате публикации (приходит от API)\n        Article.find({\n          publishedAt: element.publishedAt\n        }, function (err, doc) {\n          if (!doc.length) {\n            Article.create({\n              author: element.author,\n              title: element.title,\n              description: element.description,\n              content: element.content,\n              urlToImage: element.urlToImage,\n              publishedAt: element.publishedAt,\n              views: 0,\n              likes: 0,\n              usersIP: [] // date: reqDate.getToday()\n\n            });\n          }\n\n          ;\n          if (err) console.log(err);\n        });\n      });\n    }).then(function (res) {\n      dispatch({\n        type: 'ADD_NEWS',\n        payload: res.data,\n        loaded: true\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // постит колличество просмотров в базу и добавляет их в store\n\nexport var viewNews = function viewNews(id, elem) {\n  return function (dispatch) {\n    axios.post(\"/api/articles/\".concat(id), {\n      elem: elem,\n      views: true\n    }).then(function (res) {\n      dispatch({\n        type: 'VIEW_NEWS',\n        id: id,\n        views: res.data.views,\n        ip: res.data.userIpViews\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // постит колличество лайков в базу и добавляет их в store\n\nexport var likeNews = function likeNews(id, elem) {\n  return function (dispatch) {\n    axios.post(\"/api/articles/\".concat(id), {\n      elem: elem,\n      likes: true\n    }).then(function (res) {\n      return dispatch({\n        type: 'LIKE_NEWS',\n        id: id,\n        likes: res.data.likes,\n        ip: res.data.userIpLikes\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // поиск новостей\n// записывает данные из строки поиска в store и при рендеринге фильтрует записи\n\nexport var searchNews = function searchNews(text) {\n  return {\n    type: 'SEARCH_NEWS',\n    payload: text\n  };\n}; // постит в базу IP пользователя и добавляет его в store\n// колличество посещений сайта принимается равным длинне массива IP адресов\n\nexport var addVisitor = function addVisitor() {\n  return function (dispatch) {\n    axios.post('/api/visitors/').then(function (res) {\n      // если ответ c сервера пустой в store записывается пустой массив\n      if (!res.data) {\n        return dispatch({\n          type: 'ADD_VISITOR',\n          payload: []\n        });\n      }\n\n      return dispatch({\n        type: 'ADD_VISITOR',\n        payload: res.data.visitorsIp\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/dmitry/Рабочий стол/new/client/src/actions/actions.js"],"names":["axios","addNews","dispatch","get","require","apiURI","then","res","console","log","data","articles","forEach","element","Article","find","publishedAt","err","doc","length","create","author","title","description","content","urlToImage","views","likes","usersIP","type","payload","loaded","catch","viewNews","id","elem","post","ip","userIpViews","likeNews","userIpLikes","searchNews","text","addVisitor","visitorsIp"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n// получает новости из базы и записывает в store\n// export const addNews = () => (dispatch) =>{\n//     axios\n//         .get('/api/articles')\n//         .then(res=> {\n//             dispatch({\n//                 type: 'ADD_NEWS',\n//                 payload: res.data,\n//                 loaded: true \n//             });\n//         })\n//         .catch(err =>\n//             console.log(err));\n//  };\n\nexport const addNews = () => (dispatch) =>{\n    axios\n        .get(require('../../../config/keys').apiURI)\n        .then(res=> { \n            console.log('1')\n                // перебор массива с новостями и добавление свойств\n                res.data.articles.forEach( element => {\n        \n                        // ищет новости в базе и в случае их отсутствия добавляет новые \n                        // поиск осуществляется по дате публикации (приходит от API)\n                    Article.find({publishedAt: element.publishedAt}, (err, doc)=>{\n                        \n                        if(!doc.length){ \n                            Article.create({ \n                                author: element.author,  \n                                title: element.title,\n                                description: element.description,\n                                content: element.content,\n                                urlToImage: element.urlToImage,\n                                publishedAt: element.publishedAt,\n                                views: 0,\n                                likes: 0,\n                                usersIP: [],\n                                // date: reqDate.getToday()\n                            });\n                        };\n                        \n                        if(err) console.log(err);\n                    });\n                });\n            })\n       \n       \n        .then(res => {\n\n\n\n\n\n\n\n            dispatch({\n                type: 'ADD_NEWS',\n                payload: res.data,\n                loaded: true \n            });\n        })\n        .catch(err =>\n            console.log(err));\n };\n\n// постит колличество просмотров в базу и добавляет их в store\nexport const viewNews = (id, elem) => (dispatch) =>{\n    axios\n        .post(`/api/articles/${id}`, {elem, views: true})\n        .then(res=>{\n            dispatch({\n                type: 'VIEW_NEWS',\n                id: id,\n                views: res.data.views,\n                ip: res.data.userIpViews\n            });\n        })\n        .catch(err =>\n            console.log(err));\n};\n\n// постит колличество лайков в базу и добавляет их в store\nexport const likeNews = ( id, elem) => (dispatch) =>{\n    axios\n        .post(`/api/articles/${id}`, {elem, likes: true})\n        .then(res=>{\n            return  dispatch({\n                type: 'LIKE_NEWS',\n                id: id, \n                likes: res.data.likes,\n                ip: res.data.userIpLikes\n            }); \n        })\n        .catch(err =>\n            console.log(err));\n};\n\n// поиск новостей\n// записывает данные из строки поиска в store и при рендеринге фильтрует записи\nexport const searchNews = (text) => ({type: 'SEARCH_NEWS', payload: text});\n\n// постит в базу IP пользователя и добавляет его в store\n// колличество посещений сайта принимается равным длинне массива IP адресов\nexport  const  addVisitor = () => (dispatch) => {\n    axios\n        .post('/api/visitors/')\n        .then(res => {\n            \n            // если ответ c сервера пустой в store записывается пустой массив\n            if(!res.data){\n                return dispatch({\n                    type: 'ADD_VISITOR',\n                    payload: []\n                });\n            } \n\n            return dispatch({\n                type: 'ADD_VISITOR',\n                payload: res.data.visitorsIp\n            });\n        });\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}