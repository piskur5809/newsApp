{"ast":null,"code":"var express = require('express');\n\nvar router = express.Router();\n\nvar axios = require('axios'); //Item Model\n\n\nvar Article = require('../../models/Item');\n\nvar app = express(); // const loadNews = () => {\n//     // запрос к API\n//     axios\n//     .get(require('../../config/keys').apiURI)\n//     .then(res=> {\n//         console.log('1')\n//         // перебор массива с новостями и добавление свойств\n//         res.data.articles.forEach( element => {\n//                 // ищет новости в базе и в случае их отсутствия добавляет новые \n//                 // поиск осуществляется по дате публикации (приходит от API)\n//             Article.find({publishedAt: element.publishedAt}, (err, doc)=>{\n//                 if(!doc.length){ \n//                     Article.create({ \n//                         author: element.author,  \n//                         title: element.title,\n//                         description: element.description,\n//                         content: element.content,\n//                         urlToImage: element.urlToImage,\n//                         publishedAt: element.publishedAt,\n//                         views: 0,\n//                         likes: 0,\n//                         usersIP: [],\n//                         // date: reqDate.getToday()\n//                     });\n//                 };\n//                 if(err) console.log(err);\n//             });\n//         });\n//     })\n//     .catch(err=> console.log(err)); \n//  };\n//  router.all('*', (req, res, next) => {\n//     loadNews()\n//      next()\n//  })\n// получаем новости на страницу \n\nrouter.get('/', function (req, res) {\n  loadNews;\n  Article.find().then(function (items) {\n    console.log('2');\n    return res.json(items);\n  });\n}); // запись просмотров и лайков \n// если честно не смог разделить посты с лайками и просмотрами, поэтому сделал проверку запроса внутри\n\nrouter.post('/:id', function (req, res) {\n  // проверка лайков\n  if (req.body.likes) {\n    var addLikes = req.body.elem.likes;\n    var addIp = req.body.elem.userIpLikes; // проверка на наличие IP в базе\n\n    if (!addIp.includes(req.ip)) {\n      addLikes++;\n      addIp.push(req.ip); // если IP не существует обновляем базу\n\n      Article.findOneAndUpdate({\n        _id: req.params.id\n      }, {\n        likes: addLikes,\n        userIpLikes: addIp\n      }, {\n        new: true\n      }, function (err, item) {\n        if (err) {\n          console.log(err);\n        }\n      }).then(function (items) {\n        return res.json(items);\n      });\n    }\n\n    ;\n  }\n\n  ; // проверка просмотров\n\n  if (req.body.views) {\n    var addViews = req.body.elem.views;\n    var _addIp = req.body.elem.userIpViews; // проверка на наличие IP в базе\n\n    if (!_addIp.includes(req.ip)) {\n      addViews++;\n\n      _addIp.push(req.ip); // если IP не существует обновляем базу\n\n\n      Article.findOneAndUpdate({\n        _id: req.params.id\n      }, {\n        views: addViews,\n        userIpViews: _addIp\n      }, {\n        new: true\n      }, function (err, item) {\n        if (err) {\n          console.log(err);\n        }\n      }).then(function (items) {\n        return res.json(items);\n      });\n    }\n\n    ;\n  }\n\n  ;\n});\nmodule.exports = router;","map":null,"metadata":{},"sourceType":"script"}