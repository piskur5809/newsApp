{"ast":null,"code":"import axios from 'axios'; // получает новости из базы и записывает в store\n// export const addNews = () => (dispatch) =>{\n//     axios\n//         .get('/api/articles')\n//         .then(res=> {\n//             dispatch({\n//                 type: 'ADD_NEWS',\n//                 payload: res.data,\n//                 loaded: true \n//             });\n//         })\n//         .catch(err =>\n//             console.log(err));\n//  };\n// постит колличество просмотров в базу и добавляет их в store\n\nexport var viewNews = function viewNews(id, elem) {\n  return function (dispatch) {\n    axios.post(\"/api/articles/\".concat(id), {\n      elem: elem,\n      views: true\n    }).then(function (res) {\n      dispatch({\n        type: 'VIEW_NEWS',\n        id: id,\n        views: res.data.views,\n        ip: res.data.userIpViews\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // постит колличество лайков в базу и добавляет их в store\n\nexport var likeNews = function likeNews(id, elem) {\n  return function (dispatch) {\n    axios.post(\"/api/articles/\".concat(id), {\n      elem: elem,\n      likes: true\n    }).then(function (res) {\n      return dispatch({\n        type: 'LIKE_NEWS',\n        id: id,\n        likes: res.data.likes,\n        ip: res.data.userIpLikes\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // поиск новостей\n// записывает данные из строки поиска в store и при рендеринге фильтрует записи\n\nexport var searchNews = function searchNews(text) {\n  return {\n    type: 'SEARCH_NEWS',\n    payload: text\n  };\n}; // постит в базу IP пользователя и добавляет его в store\n// колличество посещений сайта принимается равным длинне массива IP адресов\n\nexport var addVisitor = function addVisitor() {\n  return function (dispatch) {\n    axios.post('/api/visitors/').then(function (res) {\n      // если ответ c сервера пустой в store записывается пустой массив\n      if (!res.data) {\n        return dispatch({\n          type: 'ADD_VISITOR',\n          payload: []\n        });\n      }\n\n      return dispatch({\n        type: 'ADD_VISITOR',\n        payload: res.data.visitorsIp\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/dmitry/Рабочий стол/new/client/src/actions/actions.js"],"names":["axios","viewNews","id","elem","dispatch","post","views","then","res","type","data","ip","userIpViews","catch","err","console","log","likeNews","likes","userIpLikes","searchNews","text","payload","addVisitor","visitorsIp"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AACA,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,EAAD,EAAKC,IAAL;AAAA,SAAc,UAACC,QAAD,EAAa;AAC/CJ,IAAAA,KAAK,CACAK,IADL,yBAC2BH,EAD3B,GACiC;AAACC,MAAAA,IAAI,EAAJA,IAAD;AAAOG,MAAAA,KAAK,EAAE;AAAd,KADjC,EAEKC,IAFL,CAEU,UAAAC,GAAG,EAAE;AACPJ,MAAAA,QAAQ,CAAC;AACLK,QAAAA,IAAI,EAAE,WADD;AAELP,QAAAA,EAAE,EAAEA,EAFC;AAGLI,QAAAA,KAAK,EAAEE,GAAG,CAACE,IAAJ,CAASJ,KAHX;AAILK,QAAAA,EAAE,EAAEH,GAAG,CAACE,IAAJ,CAASE;AAJR,OAAD,CAAR;AAMH,KATL,EAUKC,KAVL,CAUW,UAAAC,GAAG;AAAA,aACNC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CADM;AAAA,KAVd;AAYH,GAbuB;AAAA,CAAjB,C,CAeP;;AACA,OAAO,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAAEf,EAAF,EAAMC,IAAN;AAAA,SAAe,UAACC,QAAD,EAAa;AAChDJ,IAAAA,KAAK,CACAK,IADL,yBAC2BH,EAD3B,GACiC;AAACC,MAAAA,IAAI,EAAJA,IAAD;AAAOe,MAAAA,KAAK,EAAE;AAAd,KADjC,EAEKX,IAFL,CAEU,UAAAC,GAAG,EAAE;AACP,aAAQJ,QAAQ,CAAC;AACbK,QAAAA,IAAI,EAAE,WADO;AAEbP,QAAAA,EAAE,EAAEA,EAFS;AAGbgB,QAAAA,KAAK,EAAEV,GAAG,CAACE,IAAJ,CAASQ,KAHH;AAIbP,QAAAA,EAAE,EAAEH,GAAG,CAACE,IAAJ,CAASS;AAJA,OAAD,CAAhB;AAMH,KATL,EAUKN,KAVL,CAUW,UAAAC,GAAG;AAAA,aACNC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CADM;AAAA,KAVd;AAYH,GAbuB;AAAA,CAAjB,C,CAeP;AACA;;AACA,OAAO,IAAMM,UAAU,GAAG,SAAbA,UAAa,CAACC,IAAD;AAAA,SAAW;AAACZ,IAAAA,IAAI,EAAE,aAAP;AAAsBa,IAAAA,OAAO,EAAED;AAA/B,GAAX;AAAA,CAAnB,C,CAEP;AACA;;AACA,OAAQ,IAAOE,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,UAACnB,QAAD,EAAc;AAC5CJ,IAAAA,KAAK,CACAK,IADL,CACU,gBADV,EAEKE,IAFL,CAEU,UAAAC,GAAG,EAAI;AAET;AACA,UAAG,CAACA,GAAG,CAACE,IAAR,EAAa;AACT,eAAON,QAAQ,CAAC;AACZK,UAAAA,IAAI,EAAE,aADM;AAEZa,UAAAA,OAAO,EAAE;AAFG,SAAD,CAAf;AAIH;;AAED,aAAOlB,QAAQ,CAAC;AACZK,QAAAA,IAAI,EAAE,aADM;AAEZa,QAAAA,OAAO,EAAEd,GAAG,CAACE,IAAJ,CAASc;AAFN,OAAD,CAAf;AAIH,KAhBL;AAiBH,GAlB2B;AAAA,CAApB","sourcesContent":["import axios from 'axios';\n\n// получает новости из базы и записывает в store\n// export const addNews = () => (dispatch) =>{\n//     axios\n//         .get('/api/articles')\n//         .then(res=> {\n//             dispatch({\n//                 type: 'ADD_NEWS',\n//                 payload: res.data,\n//                 loaded: true \n//             });\n//         })\n//         .catch(err =>\n//             console.log(err));\n//  };\n\n\n\n// постит колличество просмотров в базу и добавляет их в store\nexport const viewNews = (id, elem) => (dispatch) =>{\n    axios\n        .post(`/api/articles/${id}`, {elem, views: true})\n        .then(res=>{\n            dispatch({\n                type: 'VIEW_NEWS',\n                id: id,\n                views: res.data.views,\n                ip: res.data.userIpViews\n            });\n        })\n        .catch(err =>\n            console.log(err));\n};\n\n// постит колличество лайков в базу и добавляет их в store\nexport const likeNews = ( id, elem) => (dispatch) =>{\n    axios\n        .post(`/api/articles/${id}`, {elem, likes: true})\n        .then(res=>{\n            return  dispatch({\n                type: 'LIKE_NEWS',\n                id: id, \n                likes: res.data.likes,\n                ip: res.data.userIpLikes\n            }); \n        })\n        .catch(err =>\n            console.log(err));\n};\n\n// поиск новостей\n// записывает данные из строки поиска в store и при рендеринге фильтрует записи\nexport const searchNews = (text) => ({type: 'SEARCH_NEWS', payload: text});\n\n// постит в базу IP пользователя и добавляет его в store\n// колличество посещений сайта принимается равным длинне массива IP адресов\nexport  const  addVisitor = () => (dispatch) => {\n    axios\n        .post('/api/visitors/')\n        .then(res => {\n            \n            // если ответ c сервера пустой в store записывается пустой массив\n            if(!res.data){\n                return dispatch({\n                    type: 'ADD_VISITOR',\n                    payload: []\n                });\n            } \n\n            return dispatch({\n                type: 'ADD_VISITOR',\n                payload: res.data.visitorsIp\n            });\n        });\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}