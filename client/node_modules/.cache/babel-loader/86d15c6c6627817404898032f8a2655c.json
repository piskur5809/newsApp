{"ast":null,"code":"import axios from 'axios'; // получает новости из базы и записывает в store\n// export const addNews = () => (dispatch) =>{\n//     axios\n//         .get('/api/articles')\n//         .then(res=> {\n//             dispatch({\n//                 type: 'ADD_NEWS',\n//                 payload: res.data,\n//                 loaded: true \n//             });\n//         })\n//         .catch(err =>\n//             console.log(err));\n//  };\n\nexport var addNews = function addNews() {\n  return function (dispatch) {\n    axios.get(require('../../../config/keys').apiURI).then(function (res) {\n      console.log('1'); //         // перебор массива с новостями и добавление свойств\n      //         res.data.articles.forEach( element => {\n      //                 // ищет новости в базе и в случае их отсутствия добавляет новые \n      //                 // поиск осуществляется по дате публикации (приходит от API)\n      //             Article.find({publishedAt: element.publishedAt}, (err, doc)=>{\n      //                 if(!doc.length){ \n      //                     Article.create({ \n      //                         author: element.author,  \n      //                         title: element.title,\n      //                         description: element.description,\n      //                         content: element.content,\n      //                         urlToImage: element.urlToImage,\n      //                         publishedAt: element.publishedAt,\n      //                         views: 0,\n      //                         likes: 0,\n      //                         usersIP: [],\n      //                         // date: reqDate.getToday()\n      //                     });\n      //                 };\n      //                 if(err) console.log(err);\n      //             });\n      //         });\n      //     })\n      //     .catch(err=> console.log(err));\n\n      dispatch({\n        type: 'ADD_NEWS',\n        payload: res.data,\n        loaded: true\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // постит колличество просмотров в базу и добавляет их в store\n\nexport var viewNews = function viewNews(id, elem) {\n  return function (dispatch) {\n    axios.post(\"/api/articles/\".concat(id), {\n      elem: elem,\n      views: true\n    }).then(function (res) {\n      dispatch({\n        type: 'VIEW_NEWS',\n        id: id,\n        views: res.data.views,\n        ip: res.data.userIpViews\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // постит колличество лайков в базу и добавляет их в store\n\nexport var likeNews = function likeNews(id, elem) {\n  return function (dispatch) {\n    axios.post(\"/api/articles/\".concat(id), {\n      elem: elem,\n      likes: true\n    }).then(function (res) {\n      return dispatch({\n        type: 'LIKE_NEWS',\n        id: id,\n        likes: res.data.likes,\n        ip: res.data.userIpLikes\n      });\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  };\n}; // поиск новостей\n// записывает данные из строки поиска в store и при рендеринге фильтрует записи\n\nexport var searchNews = function searchNews(text) {\n  return {\n    type: 'SEARCH_NEWS',\n    payload: text\n  };\n}; // постит в базу IP пользователя и добавляет его в store\n// колличество посещений сайта принимается равным длинне массива IP адресов\n\nexport var addVisitor = function addVisitor() {\n  return function (dispatch) {\n    axios.post('/api/visitors/').then(function (res) {\n      // если ответ c сервера пустой в store записывается пустой массив\n      if (!res.data) {\n        return dispatch({\n          type: 'ADD_VISITOR',\n          payload: []\n        });\n      }\n\n      return dispatch({\n        type: 'ADD_VISITOR',\n        payload: res.data.visitorsIp\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/home/dmitry/Рабочий стол/new/client/src/actions/actions.js"],"names":["axios","addNews","dispatch","get","require","apiURI","then","res","console","log","type","payload","data","loaded","catch","err","viewNews","id","elem","post","views","ip","userIpViews","likeNews","likes","userIpLikes","searchNews","text","addVisitor","visitorsIp"],"mappings":"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","sourcesContent":["import axios from 'axios';\n\n// получает новости из базы и записывает в store\n// export const addNews = () => (dispatch) =>{\n//     axios\n//         .get('/api/articles')\n//         .then(res=> {\n//             dispatch({\n//                 type: 'ADD_NEWS',\n//                 payload: res.data,\n//                 loaded: true \n//             });\n//         })\n//         .catch(err =>\n//             console.log(err));\n//  };\n\nexport const addNews = () => (dispatch) =>{\n    axios\n        .get(require('../../../config/keys').apiURI)\n        .then(res=> { console.log('1')\n        //         // перебор массива с новостями и добавление свойств\n        //         res.data.articles.forEach( element => {\n        \n        //                 // ищет новости в базе и в случае их отсутствия добавляет новые \n        //                 // поиск осуществляется по дате публикации (приходит от API)\n        //             Article.find({publishedAt: element.publishedAt}, (err, doc)=>{\n                        \n        //                 if(!doc.length){ \n        //                     Article.create({ \n        //                         author: element.author,  \n        //                         title: element.title,\n        //                         description: element.description,\n        //                         content: element.content,\n        //                         urlToImage: element.urlToImage,\n        //                         publishedAt: element.publishedAt,\n        //                         views: 0,\n        //                         likes: 0,\n        //                         usersIP: [],\n        //                         // date: reqDate.getToday()\n        //                     });\n        //                 };\n                        \n        //                 if(err) console.log(err);\n        //             });\n        //         });\n        //     })\n        //     .catch(err=> console.log(err));\n\n\n\n\n\n\n\n            dispatch({\n                type: 'ADD_NEWS',\n                payload: res.data,\n                loaded: true \n            });\n        })\n        .catch(err =>\n            console.log(err));\n };\n\n// постит колличество просмотров в базу и добавляет их в store\nexport const viewNews = (id, elem) => (dispatch) =>{\n    axios\n        .post(`/api/articles/${id}`, {elem, views: true})\n        .then(res=>{\n            dispatch({\n                type: 'VIEW_NEWS',\n                id: id,\n                views: res.data.views,\n                ip: res.data.userIpViews\n            });\n        })\n        .catch(err =>\n            console.log(err));\n};\n\n// постит колличество лайков в базу и добавляет их в store\nexport const likeNews = ( id, elem) => (dispatch) =>{\n    axios\n        .post(`/api/articles/${id}`, {elem, likes: true})\n        .then(res=>{\n            return  dispatch({\n                type: 'LIKE_NEWS',\n                id: id, \n                likes: res.data.likes,\n                ip: res.data.userIpLikes\n            }); \n        })\n        .catch(err =>\n            console.log(err));\n};\n\n// поиск новостей\n// записывает данные из строки поиска в store и при рендеринге фильтрует записи\nexport const searchNews = (text) => ({type: 'SEARCH_NEWS', payload: text});\n\n// постит в базу IP пользователя и добавляет его в store\n// колличество посещений сайта принимается равным длинне массива IP адресов\nexport  const  addVisitor = () => (dispatch) => {\n    axios\n        .post('/api/visitors/')\n        .then(res => {\n            \n            // если ответ c сервера пустой в store записывается пустой массив\n            if(!res.data){\n                return dispatch({\n                    type: 'ADD_VISITOR',\n                    payload: []\n                });\n            } \n\n            return dispatch({\n                type: 'ADD_VISITOR',\n                payload: res.data.visitorsIp\n            });\n        });\n};\n\n\n\n"]},"metadata":{},"sourceType":"module"}